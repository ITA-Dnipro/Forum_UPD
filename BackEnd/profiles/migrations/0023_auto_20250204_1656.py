# Generated by Django 4.2.3 on 2025-02-04 14:56


from django.db import migrations
from faker import Faker
import random

def seed_data(apps, schema_editor):
    fake = Faker('uk_UA')

    Category = apps.get_model('profiles', 'Category')
    Activity = apps.get_model('profiles', 'Activity')
    Region = apps.get_model('profiles', 'Region')
    Profile = apps.get_model('profiles', 'Profile')

    CustomUser = apps.get_model('authentication', 'CustomUser')

    categories_ukr = [
        "Технології", "Мистецтво", "Мода", "Соціальні проекти",
        "Освіта", "Медицина", "Спорт", "Туризм",
        "Кулінарія", "Музика", "Кіно", "Література",
        "Наука", "Екологія", "Фінанси", "Будівництво",
        "Автомобілі", "Ігри", "Подорожі", "Фотографія",
        "Психологія", "Фітнес", "Журналістика", "Релігія",
        "Політика", "Історія", "Філософія", "Маркетинг",
        "Дизайн інтер'єру", "Ювелірна справа", "Косметологія", "Військова справа"
    ]

    for cat in categories_ukr:
        Category.objects.get_or_create(name=cat)
    
    activities_ukr = [
        "Програмування", "Дизайн", "Сільське господарство", "Торгівля",
        "Викладання", "Лікування", "Тренерство", "Екскурсії",
        "Готування", "Виконання музики", "Зйомка фільмів", "Написання книг",
        "Дослідження", "Захист природи", "Банківська справа", "Ремонт",
        "Автосервіс", "Розробка ігор", "Організація подорожей", "Фотозйомка",
        "Консультування", "Тренування", "Написання статей", "Проведення обрядів",
        "Політична діяльність", "Вивчення історії", "Викладання філософії", "Реклама",
        "Оформлення інтер'єру", "Виготовлення прикрас", "Догляд за шкірою", "Військова служба"
    ]

    for act in activities_ukr:
        Activity.objects.get_or_create(name=act)

    regions_ukr = [
        ("Київська", "Kyiv"),
        ("Львівська", "Lviv"),
        ("Одеська", "Odesa"),
        ("Харківська", "Kharkiv"),
        ("Донецька", "Donetsk"),
        ("Дніпропетровська", "Dnipropetrovsk"),
        ("Івано-Франківська", "Ivano-Frankivsk"),
        ("Запорізька", "Zaporizhzhia"),
        ("Вінницька", "Vinnytsia"),
        ("Житомирська", "Zhytomyr"),
        ("Полтавська", "Poltava"),
        ("Рівненська", "Rivne"),
        ("Сумська", "Sumy"),
        ("Тернопільська", "Ternopil"),
        ("Херсонська", "Kherson"),
        ("Хмельницька", "Khmelnytskyi"),
        ("Черкаська", "Cherkasy"),
        ("Чернівецька", "Chernivtsi"),
        ("Чернігівська", "Chernihiv"),
        ("Закарпатська", "Zakarpattia"),
        ("Миколаївська", "Mykolaiv"),
        ("Кіровоградська", "Kropyvnytskyi"),
        ("Волинська", "Volyn"),
        ("Луганська", "Luhansk"),
        ("АР Крим", "Crimea")
    ]

    for ukr_name, eng_name in regions_ukr:
        Region.objects.get_or_create(name_eng=eng_name, name_ukr=ukr_name)

    for i in range(1, 21):
        user_email = f"user{i}@gmail.com"
        user = CustomUser.objects.get(email=user_email)

        Profile.objects.get_or_create(
            person=user,
            defaults={
                "name": fake.company(),
                "is_registered": True,
                "is_startup": True,
                "official_name": f"ТОВ '{fake.company_suffix()}'",
                "common_info": fake.text(max_nb_chars=200),
                "address": f"м. {fake.city()}, {fake.street_address()}",
                "startup_idea": fake.catch_phrase(),
                "founded": random.randint(2010, 2024),
            }
        )

    for i in range(21, 31):
        user_email = f"user{i}@gmail.com"
        user = CustomUser.objects.get(email=user_email)

        Profile.objects.get_or_create(
            person=user,
            defaults={
                "name": fake.name(),
                "is_registered": True,
                "is_startup": False,
                "official_name": f"ФОП '{fake.last_name()}'",
                "common_info": fake.text(max_nb_chars=200),
                "address": f"{fake.city()}, {fake.street_address()}",
            }
        )


def remove_data(apps, schema_editor):
    
    Category = apps.get_model('profiles', 'Category')
    Activity = apps.get_model('profiles', 'Activity')
    Region = apps.get_model('profiles', 'Region')
    Profile = apps.get_model('profiles', 'Profile')
    CustomUser = apps.get_model('authentication', 'CustomUser')

    Category.objects.all().delete()
    
    Activity.objects.all().delete()
    
    Region.objects.all().delete()
    
    Profile.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("profiles", "0022_alter_profile_name_alter_profile_official_name"),
        ("authentication", "0003_auto_20250204_1656"), 
    ]

    operations = []
